<UserControl x:Class="AttributeTest.SingleOperConfigView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:AttributeTest" x:Name="uc"
             mc:Ignorable="d" d:DataContext="{d:DesignInstance local:SingleOperConfigVM}"
             d:DesignHeight="600" d:DesignWidth="1000">
    <UserControl.Resources>
        <local:EnumToArrayConverter x:Key="EnumToArrayConverter"/>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <DataTemplate DataType="{x:Type local:EquipmentSetup}" x:Key="EquipmentSetupDataTemplate">
            <Border Background="Transparent">
                <StackPanel>
                    <Border>
                        <TextBlock FontWeight="Bold" Text="{Binding EquipmentName}" Visibility="{Binding IsOperatable,Converter={StaticResource BooleanToVisibilityConverter}}" Width="120" Margin="10,5" HorizontalAlignment="Left"/>
                    </Border>
                </StackPanel>
            </Border>
        </DataTemplate>

        <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
            <Setter Property="Margin" Value="0,2"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="5 0 0 0"/>
        </Style>
        <DataTemplate x:Key="OperTypeDataTemplate">
            <Grid Margin="0,3">
                <TextBlock Text="{Binding OperateType}"/>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="ConditionDataTemplate">
            <Expander Header="{Binding Key}" IsExpanded="True">
                <ListBox ItemsSource="{Binding Value}" Margin="2" HorizontalContentAlignment="Stretch">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid x:Name="grid" Background="White" Margin="0,2" Width="300" Visibility="{Binding IsChosen,Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" MaxWidth="120"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="80"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding PropertyMark}" TextTrimming="CharacterEllipsis"/>
                                <Control x:Name="valueControl"  Grid.Column="1">
                                    <Control.Template>
                                        <ControlTemplate>
                                            <TextBox Text="{Binding PropertyValue}"/>
                                        </ControlTemplate>
                                    </Control.Template>
                                </Control>
                                <Button x:Name="btn" Visibility="Hidden" Grid.Column="2" Content="删除✖" Command="{Binding DataContext.DeleteConditionCommand, RelativeSource={RelativeSource AncestorType=ListBox,AncestorLevel=2}}" 
                                        CommandParameter="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                                <!--ContentControl不行，又出现control作为Content后，下一个引用后，前一个会消失-->
                                <!--<ContentControl x:Name="valueControl" Grid.Column="1">
                                    <ContentControl.Content>
                                        <TextBox Text="{Binding PropertyValue}"/>
                                    </ContentControl.Content>
                                </ContentControl>-->
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding PropertyType}" Value="{x:Type sys:Boolean}">
                                    <Setter TargetName="valueControl" Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <CheckBox IsChecked="{Binding PropertyValue}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding PropertyType.BaseType}" Value="{x:Type sys:Enum}">
                                    <Setter TargetName="valueControl" Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <ComboBox ItemsSource="{Binding PropertyType,Converter={StaticResource EnumToArrayConverter}}" SelectedValue="{Binding PropertyValue}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <Trigger  Property="IsMouseOver" Value="True" SourceName="grid">
                                    <!--要生效grid必须有背景色-->
                                    <Setter TargetName="btn" Property="Visibility" Value="Visible"/>
                                </Trigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Expander>
        </DataTemplate>

        <DataTemplate x:Key="AllConditionDataTemplate">
            <Expander Header="{Binding Key}" IsExpanded="True">
                <ListBox ItemsSource="{Binding Value}" Margin="2" HorizontalContentAlignment="Stretch">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid x:Name="grid" Margin="0,2" Width="300" Background="White" Visibility="{Binding IsChosen,Converter={StaticResource BooleanToVisibilityConverter},ConverterParameter=True}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" MaxWidth="120"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding PropertyMark}" TextTrimming="CharacterEllipsis"/>
                                <Button x:Name="btn" Visibility="Hidden" Grid.Column="1" Content="←添加" Command="{Binding DataContext.AddToConditionCommand, RelativeSource={RelativeSource AncestorType=ListBox,AncestorLevel=2}}" 
                                        CommandParameter="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                                <!--CommandParameter="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}}"-->
                                <!--CommandParameter="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"-->
                                <!--经试验，上面三句都是一样的效果，另外就是ContentPresenter的DataContext就是Content-->
                            </Grid>
                            <DataTemplate.Triggers>
                                <Trigger  Property="IsMouseOver" Value="True" SourceName="grid">
                                    <!--要生效grid必须有背景色-->
                                    <Setter TargetName="btn" Property="Visibility" Value="Visible"/>
                                </Trigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Expander>
        </DataTemplate>

        <DataTemplate x:Key="StepDataTemplate">
            <Grid x:Name="grid" Background="White" Margin="0,2" Width="300">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MaxWidth="120"/>
                    <ColumnDefinition Width="*"/>
                    <!--<ColumnDefinition Width="80"/>-->
                </Grid.ColumnDefinitions>
                <TextBlock Text="{Binding EquipmentMark}" TextTrimming="CharacterEllipsis"/>
                <CheckBox x:Name="btn" Grid.Column="1" Content="选择" IsChecked="{Binding IsSelected}"/>
            </Grid>
        </DataTemplate>

        <!--试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验-->
        <ItemsPanelTemplate x:Key="ConditionItemsPanelTemplate">
            <VirtualizingStackPanel IsItemsHost="True"/>
        </ItemsPanelTemplate>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
        <Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--End 试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验试验-->

        <DataTemplate x:Key="ConditionSetupTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Column="0">
                    <ListBox ItemsSource="{Binding OperationConditions}" ItemsPanel="{DynamicResource ConditionItemsPanelTemplate}" ItemContainerStyle="{DynamicResource ListBoxItemStyle1}" ItemTemplate="{DynamicResource ConditionDataTemplate}"/>
                </ScrollViewer>
                <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Column="1">
                    <ListBox ItemsSource="{Binding OperationConditions}" ItemsPanel="{DynamicResource ConditionItemsPanelTemplate}" ItemContainerStyle="{DynamicResource ListBoxItemStyle1}" ItemTemplate="{DynamicResource AllConditionDataTemplate}"/>
                </ScrollViewer>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="StepSetupTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Column="0">
                    <ListBox ItemsSource="{Binding OperationSteps}" ItemsPanel="{DynamicResource ConditionItemsPanelTemplate}" ItemContainerStyle="{DynamicResource ListBoxItemStyle1}" ItemTemplate="{DynamicResource StepDataTemplate}"/>
                </ScrollViewer>
            </Grid>
        </DataTemplate>

    </UserControl.Resources>


    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <DockPanel Grid.Column="0" MinWidth="200" Margin="5">
            <Label DockPanel.Dock="Top" Content="设备" Style="{StaticResource GroupHeaderLabelStyle}"/>
            <ListBox x:Name="equipListbox" ItemsSource="{Binding EquipmentSetups}" SelectedItem="{Binding SelectedEquipSetup}" ItemTemplate="{StaticResource EquipmentSetupDataTemplate}" ItemContainerStyle="{StaticResource ListBoxItemStyle}"></ListBox>
        </DockPanel>

        <DockPanel Grid.Column="1" MinWidth="100" Margin="5">
            <Label DockPanel.Dock="Top" Content="操作" Style="{StaticResource GroupHeaderLabelStyle}"/>
            <ListBox ItemTemplate="{StaticResource OperTypeDataTemplate}">
                <ListBox.Style>
                    <Style TargetType="ListBox">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedEquipSetup.IsMultiStepOperation}" Value="False">
                                <Setter Property="ItemsSource" Value="{Binding SingleOperates}"/>
                                <Setter Property="SelectedValue" Value="{Binding SelectedSingleOperate}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SelectedEquipSetup.IsMultiStepOperation}" Value="True">
                                <Setter Property="ItemsSource" Value="{Binding MultipleOperates}"/>
                                <Setter Property="SelectedValue" Value="{Binding SelectedMultipleOperate}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.Style>
            </ListBox>
        </DockPanel>

        <DockPanel Grid.Column="3" Margin="5">
            <Label DockPanel.Dock="Top" Content="操作条件" Style="{StaticResource GroupHeaderLabelStyle}"/>
            <ContentControl Content="{Binding}">
                <ContentControl.Style>
                    <Style TargetType="ContentControl">
                        <Setter Property="ContentTemplate" Value="{StaticResource ConditionSetupTemplate}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedEquipSetup.IsMultiStepOperation}" Value="True">
                                <Setter Property="ContentTemplate" Value="{StaticResource StepSetupTemplate}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ContentControl.Style>
            </ContentControl>



        </DockPanel>

    </Grid>
</UserControl>
